service: telegram-websockets
useDotenv: true

provider:
  name: aws
  stage: prod
  region: eu-central-1
  memorySize: 512
  timeout: 30
  runtime: nodejs16.x
  architecture: arm64
  lambdaHashingVersion: 20201221
  environment:
    IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}
    CHAT_DATA_BUCKET_NAME: ${self:custom.chatDataBucketName}
    BOT_TOKEN: ${env:BOT_TOKEN}
    region: ${self:provider.region}
  iam:
    role:
      statements:
        ${file(roleStatements.yml)}

functions:
  connect:
    handler: src/handlers.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: src/handlers.disconnect
    events:
      - websocket:
          route: $disconnect
  stats:
    handler: src/handlers.stats
    events:
      - websocket:
          route: stats

  broadcastStats:
    handler: src/handlers.broadcastStats

  updateChatData:
    handler: src/handlers.updateChatData

  getChatByName:
    handler: src/handlers.getChatByName
    events:
      - http:
          path: /search
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin

custom:
  imagesBucketName: chat-profile-images
  chatDataBucketName: chat-profile-data
  serverless-offline:
    httpPort: 4000
  esbuild:
    packager: yarn
    minify: true
    nativeZip: true
    target: node16
    exclude:
      - aws-sdk

plugins:
  - serverless-offline
  - serverless-esbuild

resources:
  ${file(resources.yml)}
